<?php

/*
Extension Name: HTMLValidator
Extension Url: http://www.math.ntnu.no/~stacey/HowDidIDoThat/Vanilla/HTMLValidator
Description: Validate and Sanitise HTML fragments
Version: 0.1
Author: Andrew Stacey
Author Url: http://www.math.ntnu.no/~stacey
*/

/*
Copyright (C) 2010 Andrew Stacey

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//Dictionary
//require_once('english.php');

require_once('HTML5_loader.php');
use Masterminds\HTML5;

  function Validate($String)
  {
    static $validator;
    if (!isset($validator))
      $validator = new HTMLValidator();
	$String = $validator->parse($String,true);
    return $String;
  }


## Global functions to force a string to be valid HTML text with no markup
# Source:
# http://www.phpedit.net/snippet/Remove-Invalid-XML-Characters

function stripInvalidXml($value)
{
  $ret = "";
  $current;
  if (empty($value)) 
    {
      return $ret;
    }

  $length = strlen($value);
  for ($i=0; $i < $length; $i++)
    {
      $current = ord($value{$i});
      if (($current == 0x9) ||
	  ($current == 0xA) ||
	  ($current == 0xD) ||
	  (($current >= 0x20) && ($current <= 0xD7FF)) ||
	  (($current >= 0xE000) && ($current <= 0xFFFD)) ||
	  (($current >= 0x10000) && ($current <= 0x10FFFF)))
        {
	  $ret .= chr($current);
        }
        else
	  {
            $ret .= " ";
	  }
    }
  return $ret;
}

function safeToDisplay($string)
{
  $safe_string = htmlspecialchars(stripInvalidXML($string),ENT_QUOTES,'UTF-8');
  return $safe_string;
}

class HTMLValidator {

  var $VALIDATE = false; // Do we validate?
  var $SANITISE = true; // Do we sanitise?
  var $CORRECT = false; // When sanitising, do we correct or merely delete?

  var $entities = array(
	'Alpha',
	'Beta',
	'Epsilon',
	'Zeta',
	'Eta',
	'Iota',
	'Kappa',
	'Mu',
	'Nu',
	'Omicron',
	'Rho',
	'Tau',
	'Chi',
	'epsilon',
	'zeta',
	'omicron',
	'sigmaf',
	'thetasym',
	'upsih',
	'oline',
	'frasl',
	'alefsym',
	'crarr',
	'empty',
	'amp',
	'lt',
	'zwnj',
	'zwj',
	'lrm',
	'rlm',
	'sbquo',
	'bdquo',
	'lsaquo',
	'rsaquo',
	'euro',
	'angzarr',
	'cirmid',
	'cudarrl',
	'cudarrr',
	'cularr',
	'cularrp',
	'curarr',
	'curarrm',
	'Darr',
	'dArr',
	'ddarr',
	'DDotrahd',
	'dfisht',
	'dHar',
	'dharl',
	'dharr',
	'duarr',
	'duhar',
	'dzigrarr',
	'erarr',
	'hArr',
	'harr',
	'harrcir',
	'harrw',
	'hoarr',
	'imof',
	'lAarr',
	'Larr',
	'larrbfs',
	'larrfs',
	'larrhk',
	'larrlp',
	'larrpl',
	'larrsim',
	'larrtl',
	'lAtail',
	'latail',
	'lBarr',
	'lbarr',
	'ldca',
	'ldrdhar',
	'ldrushar',
	'ldsh',
	'lfisht',
	'lHar',
	'lhard',
	'lharu',
	'lharul',
	'llarr',
	'llhard',
	'loarr',
	'lrarr',
	'lrhar',
	'lrhard',
	'lsh',
	'lurdshar',
	'luruhar',
	'Map',
	'map',
	'midcir',
	'mumap',
	'nearhk',
	'neArr',
	'nearr',
	'nesear',
	'nhArr',
	'nharr',
	'nlArr',
	'nlarr',
	'nrArr',
	'nrarr',
	'nrarrc',
	'nrarrw',
	'nvHarr',
	'nvlArr',
	'nvrArr',
	'nwarhk',
	'nwArr',
	'nwarr',
	'nwnear',
	'olarr',
	'orarr',
	'origof',
	'rAarr',
	'Rarr',
	'rarrap',
	'rarrbfs',
	'rarrc',
	'rarrfs',
	'rarrhk',
	'rarrlp',
	'rarrpl',
	'rarrsim',
	'Rarrtl',
	'rarrtl',
	'rarrw',
	'rAtail',
	'ratail',
	'RBarr',
	'rBarr',
	'rbarr',
	'rdca',
	'rdldhar',
	'rdsh',
	'rfisht',
	'rHar',
	'rhard',
	'rharu',
	'rharul',
	'rlarr',
	'rlhar',
	'roarr',
	'rrarr',
	'rsh',
	'ruluhar',
	'searhk',
	'seArr',
	'searr',
	'seswar',
	'simrarr',
	'slarr',
	'srarr',
	'swarhk',
	'swArr',
	'swarr',
	'swnwar',
	'Uarr',
	'uArr',
	'Uarrocir',
	'udarr',
	'udhar',
	'ufisht',
	'uHar',
	'uharl',
	'uharr',
	'uuarr',
	'vArr',
	'varr',
	'xhArr',
	'xharr',
	'xlArr',
	'xlarr',
	'xmap',
	'xrArr',
	'xrarr',
	'zigrarr',
	'ac',
	'acE',
	'amalg',
	'barvee',
	'Barwed',
	'barwed',
	'bsolb',
	'Cap',
	'capand',
	'capbrcup',
	'capcap',
	'capcup',
	'capdot',
	'caps',
	'ccaps',
	'ccups',
	'ccupssm',
	'coprod',
	'Cup',
	'cupbrcap',
	'cupcap',
	'cupcup',
	'cupdot',
	'cupor',
	'cups',
	'cuvee',
	'cuwed',
	'Dagger',
	'dagger',
	'diam',
	'divonx',
	'eplus',
	'hercon',
	'intcal',
	'iprod',
	'loplus',
	'lotimes',
	'lthree',
	'ltimes',
	'midast',
	'minusb',
	'minusd',
	'minusdu',
	'ncap',
	'ncup',
	'oast',
	'ocir',
	'odash',
	'odiv',
	'odot',
	'odsold',
	'ofcir',
	'ogt',
	'ohbar',
	'olcir',
	'olt',
	'omid',
	'ominus',
	'opar',
	'operp',
	'oplus',
	'osol',
	'Otimes',
	'otimes',
	'otimesas',
	'ovbar',
	'plusacir',
	'plusb',
	'pluscir',
	'plusdo',
	'plusdu',
	'pluse',
	'plussim',
	'plustwo',
	'prod',
	'race',
	'roplus',
	'rotimes',
	'rthree',
	'rtimes',
	'sdot',
	'sdotb',
	'setmn',
	'simplus',
	'smashp',
	'solb',
	'sqcap',
	'sqcaps',
	'sqcup',
	'sqcups',
	'ssetmn',
	'sstarf',
	'subdot',
	'sum',
	'supdot',
	'timesb',
	'timesbar',
	'timesd',
	'tridot',
	'triminus',
	'triplus',
	'trisb',
	'tritime',
	'uplus',
	'veebar',
	'wedbar',
	'wreath',
	'xcap',
	'xcirc',
	'xcup',
	'xdtri',
	'xodot',
	'xoplus',
	'xotime',
	'xsqcup',
	'xuplus',
	'xutri',
	'xvee',
	'xwedge',
	'dlcorn',
	'drcorn',
	'gtlPar',
	'langd',
	'lbrke',
	'lbrksld',
	'lbrkslu',
	'lceil',
	'lfloor',
	'lmoust',
	'lparlt',
	'ltrPar',
	'rangd',
	'rbrke',
	'rbrksld',
	'rbrkslu',
	'rceil',
	'rfloor',
	'rmoust',
	'rpargt',
	'ulcorn',
	'urcorn',
	'gnap',
	'gnE',
	'gne',
	'gnsim',
	'gvnE',
	'lnap',
	'lnE',
	'lne',
	'lnsim',
	'lvnE',
	'nap',
	'napE',
	'napid',
	'ncong',
	'ncongdot',
	'nequiv',
	'ngE',
	'nge',
	'nges',
	'nGg',
	'ngsim',
	'nGt',
	'ngt',
	'nGtv',
	'nlE',
	'nle',
	'nles',
	'nLl',
	'nlsim',
	'nLt',
	'nlt',
	'nltri',
	'nltrie',
	'nLtv',
	'nmid',
	'npar',
	'npr',
	'nprcue',
	'npre',
	'nrtri',
	'nrtrie',
	'nsc',
	'nsccue',
	'nsce',
	'nsim',
	'nsime',
	'nsmid',
	'nspar',
	'nsqsube',
	'nsqsupe',
	'nsub',
	'nsubE',
	'nsube',
	'nsup',
	'nsupE',
	'nsupe',
	'ntgl',
	'ntlg',
	'nvap',
	'nVDash',
	'nVdash',
	'nvDash',
	'nvdash',
	'nvge',
	'nvgt',
	'nvle',
	'nvltrie',
	'nvrtrie',
	'nvsim',
	'parsim',
	'prnap',
	'prnE',
	'prnsim',
	'rnmid',
	'scnap',
	'scnE',
	'scnsim',
	'simne',
	'solbar',
	'subnE',
	'subne',
	'supnE',
	'supne',
	'vnsub',
	'vnsup',
	'vsubnE',
	'vsubne',
	'vsupnE',
	'vsupne',
	'ang',
	'ange',
	'angmsd',
	'angmsdaa',
	'angmsdab',
	'angmsdac',
	'angmsdad',
	'angmsdae',
	'angmsdaf',
	'angmsdag',
	'angmsdah',
	'angrtvb',
	'angrtvbd',
	'bbrk',
	'bbrktbrk',
	'bemptyv',
	'beth',
	'boxbox',
	'bprime',
	'bsemi',
	'cemptyv',
	'cirE',
	'cirscir',
	'comp',
	'daleth',
	'demptyv',
	'ell',
	'empty',
	'emptyv',
	'gimel',
	'iiota',
	'image',
	'imath',
	'jmath',
	'laemptyv',
	'lltri',
	'lrtri',
	'mho',
	'nang',
	'nexist',
	'oS',
	'planck',
	'plankv',
	'raemptyv',
	'range',
	'real',
	'tbrk',
	'trpezium',
	'ultri',
	'urtri',
	'vzigzag',
	'weierp',
	'apE',
	'ape',
	'apid',
	'asymp',
	'Barv',
	'bcong',
	'bepsi',
	'bowtie',
	'bsim',
	'bsime',
	'bsolhsub',
	'bump',
	'bumpE',
	'bumpe',
	'cire',
	'Colon',
	'Colone',
	'colone',
	'congdot',
	'csub',
	'csube',
	'csup',
	'csupe',
	'cuepr',
	'cuesc',
	'Dashv',
	'dashv',
	'easter',
	'ecir',
	'ecolon',
	'eDDot',
	'eDot',
	'efDot',
	'eg',
	'egs',
	'egsdot',
	'el',
	'els',
	'elsdot',
	'equest',
	'equivDD',
	'erDot',
	'esdot',
	'Esim',
	'esim',
	'fork',
	'forkv',
	'frown',
	'gap',
	'gE',
	'gEl',
	'gel',
	'ges',
	'gescc',
	'gesdot',
	'gesdoto',
	'gesdotol',
	'gesl',
	'gesles',
	'Gg',
	'gl',
	'gla',
	'glE',
	'glj',
	'gsim',
	'gsime',
	'gsiml',
	'Gt',
	'gtcc',
	'gtcir',
	'gtdot',
	'gtquest',
	'gtrarr',
	'homtht',
	'lap',
	'lat',
	'late',
	'lates',
	'lE',
	'lEg',
	'leg',
	'les',
	'lescc',
	'lesdot',
	'lesdoto',
	'lesdotor',
	'lesg',
	'lesges',
	'lg',
	'lgE',
	'Ll',
	'lsim',
	'lsime',
	'lsimg',
	'Lt',
	'ltcc',
	'ltcir',
	'ltdot',
	'ltlarr',
	'ltquest',
	'ltrie',
	'mcomma',
	'mDDot',
	'mid',
	'mlcp',
	'models',
	'mstpos',
	'Pr',
	'pr',
	'prap',
	'prcue',
	'prE',
	'pre',
	'prsim',
	'prurel',
	'ratio',
	'rtrie',
	'rtriltri',
	'Sc',
	'sc',
	'scap',
	'sccue',
	'scE',
	'sce',
	'scsim',
	'sdote',
	'sfrown',
	'simg',
	'simgE',
	'siml',
	'simlE',
	'smid',
	'smile',
	'smt',
	'smte',
	'smtes',
	'spar',
	'sqsub',
	'sqsube',
	'sqsup',
	'sqsupe',
	'ssmile',
	'Sub',
	'subE',
	'subedot',
	'submult',
	'subplus',
	'subrarr',
	'subsim',
	'subsub',
	'subsup',
	'Sup',
	'supdsub',
	'supE',
	'supedot',
	'suphsol',
	'suphsub',
	'suplarr',
	'supmult',
	'supplus',
	'supsim',
	'supsub',
	'supsup',
	'thkap',
	'thksim',
	'topfork',
	'trie',
	'twixt',
	'Vbar',
	'vBar',
	'vBarv',
	'VDash',
	'Vdash',
	'vDash',
	'vdash',
	'Vdashl',
	'vltri',
	'vprop',
	'vrtri',
	'Vvdash',
	'alpha',
	'beta',
	'chi',
	'Delta',
	'delta',
	'epsi',
	'epsiv',
	'eta',
	'Gamma',
	'gamma',
	'Gammad',
	'gammad',
	'iota',
	'kappa',
	'kappav',
	'Lambda',
	'lambda',
	'mu',
	'nu',
	'Omega',
	'omega',
	'Phi',
	'phi',
	'phiv',
	'Pi',
	'pi',
	'piv',
	'Psi',
	'psi',
	'rho',
	'rhov',
	'Sigma',
	'sigma',
	'sigmav',
	'tau',
	'Theta',
	'theta',
	'thetav',
	'Upsi',
	'upsi',
	'Xi',
	'xi',
	'zeta',
	'Afr',
	'afr',
	'Bfr',
	'bfr',
	'Cfr',
	'cfr',
	'Dfr',
	'dfr',
	'Efr',
	'efr',
	'Ffr',
	'ffr',
	'Gfr',
	'gfr',
	'Hfr',
	'hfr',
	'Ifr',
	'ifr',
	'Jfr',
	'jfr',
	'Kfr',
	'kfr',
	'Lfr',
	'lfr',
	'Mfr',
	'mfr',
	'Nfr',
	'nfr',
	'Ofr',
	'ofr',
	'Pfr',
	'pfr',
	'Qfr',
	'qfr',
	'Rfr',
	'rfr',
	'Sfr',
	'sfr',
	'Tfr',
	'tfr',
	'Ufr',
	'ufr',
	'Vfr',
	'vfr',
	'Wfr',
	'wfr',
	'Xfr',
	'xfr',
	'Yfr',
	'yfr',
	'Zfr',
	'zfr',
	'Aopf',
	'Bopf',
	'Copf',
	'Dopf',
	'Eopf',
	'Fopf',
	'Gopf',
	'Hopf',
	'Iopf',
	'Jopf',
	'Kopf',
	'Lopf',
	'Mopf',
	'Nopf',
	'Oopf',
	'Popf',
	'Qopf',
	'Ropf',
	'Sopf',
	'Topf',
	'Uopf',
	'Vopf',
	'Wopf',
	'Xopf',
	'Yopf',
	'Zopf',
	'Ascr',
	'ascr',
	'Bscr',
	'bscr',
	'Cscr',
	'cscr',
	'Dscr',
	'dscr',
	'Escr',
	'escr',
	'Fscr',
	'fscr',
	'Gscr',
	'gscr',
	'Hscr',
	'hscr',
	'Iscr',
	'iscr',
	'Jscr',
	'jscr',
	'Kscr',
	'kscr',
	'Lscr',
	'lscr',
	'Mscr',
	'mscr',
	'Nscr',
	'nscr',
	'Oscr',
	'oscr',
	'Pscr',
	'pscr',
	'Qscr',
	'qscr',
	'Rscr',
	'rscr',
	'Sscr',
	'sscr',
	'Tscr',
	'tscr',
	'Uscr',
	'uscr',
	'Vscr',
	'vscr',
	'Wscr',
	'wscr',
	'Xscr',
	'xscr',
	'Yscr',
	'yscr',
	'Zscr',
	'zscr',
	'acd',
	'aleph',
	'And',
	'and',
	'andand',
	'andd',
	'andslope',
	'andv',
	'angrt',
	'angsph',
	'angst',
	'ap',
	'apacir',
	'awconint',
	'awint',
	'becaus',
	'bernou',
	'bne',
	'bnequiv',
	'bNot',
	'bnot',
	'bottom',
	'cap',
	'Cconint',
	'cirfnint',
	'compfn',
	'cong',
	'Conint',
	'conint',
	'ctdot',
	'cup',
	'cwconint',
	'cwint',
	'cylcty',
	'disin',
	'Dot',
	'DotDot',
	'dsol',
	'dtdot',
	'dwangle',
	'elinters',
	'epar',
	'eparsl',
	'equiv',
	'eqvparsl',
	'exist',
	'fltns',
	'fnof',
	'forall',
	'fpartint',
	'ge',
	'hamilt',
	'iff',
	'iinfin',
	'imped',
	'infin',
	'infintie',
	'Int',
	'int',
	'intlarhk',
	'isin',
	'isindot',
	'isinE',
	'isins',
	'isinsv',
	'isinv',
	'lagran',
	'Lang',
	'lang',
	'lArr',
	'lbbrk',
	'le',
	'loang',
	'lobrk',
	'lopar',
	'lowast',
	'minus',
	'mnplus',
	'nabla',
	'ne',
	'nedot',
	'nhpar',
	'ni',
	'nis',
	'nisd',
	'niv',
	'Not',
	'notin',
	'notindot',
	'notinE',
	'notinva',
	'notinvb',
	'notinvc',
	'notni',
	'notniva',
	'notnivb',
	'notnivc',
	'nparsl',
	'npart',
	'npolint',
	'nvinfin',
	'olcross',
	'Or',
	'or',
	'ord',
	'order',
	'oror',
	'orslope',
	'orv',
	'par',
	'parsl',
	'part',
	'permil',
	'perp',
	'pertenk',
	'phmmat',
	'pointint',
	'Prime',
	'prime',
	'profalar',
	'profline',
	'profsurf',
	'prop',
	'qint',
	'qprime',
	'quatint',
	'radic',
	'Rang',
	'rang',
	'rArr',
	'rbbrk',
	'roang',
	'robrk',
	'ropar',
	'rppolint',
	'scpolint',
	'sim',
	'simdot',
	'sime',
	'smeparsl',
	'square',
	'squarf',
	'strns',
	'sub',
	'sube',
	'sup',
	'supe',
	'tdot',
	'there4',
	'tint',
	'top',
	'topbot',
	'topcir',
	'tprime',
	'utdot',
	'uwangle',
	'vangrt',
	'veeeq',
	'Verbar',
	'wedgeq',
	'xnis',
	'boxDL',
	'boxDl',
	'boxdL',
	'boxdl',
	'boxDR',
	'boxDr',
	'boxdR',
	'boxdr',
	'boxH',
	'boxh',
	'boxHD',
	'boxHd',
	'boxhD',
	'boxhd',
	'boxHU',
	'boxHu',
	'boxhU',
	'boxhu',
	'boxUL',
	'boxUl',
	'boxuL',
	'boxul',
	'boxUR',
	'boxUr',
	'boxuR',
	'boxur',
	'boxV',
	'boxv',
	'boxVH',
	'boxVh',
	'boxvH',
	'boxvh',
	'boxVL',
	'boxVl',
	'boxvL',
	'boxvl',
	'boxVR',
	'boxVr',
	'boxvR',
	'boxvr',
	'Acy',
	'acy',
	'Bcy',
	'bcy',
	'CHcy',
	'chcy',
	'Dcy',
	'dcy',
	'Ecy',
	'ecy',
	'Fcy',
	'fcy',
	'Gcy',
	'gcy',
	'HARDcy',
	'hardcy',
	'Icy',
	'icy',
	'IEcy',
	'iecy',
	'IOcy',
	'iocy',
	'Jcy',
	'jcy',
	'Kcy',
	'kcy',
	'KHcy',
	'khcy',
	'Lcy',
	'lcy',
	'Mcy',
	'mcy',
	'Ncy',
	'ncy',
	'numero',
	'Ocy',
	'ocy',
	'Pcy',
	'pcy',
	'Rcy',
	'rcy',
	'Scy',
	'scy',
	'SHCHcy',
	'shchcy',
	'SHcy',
	'shcy',
	'SOFTcy',
	'softcy',
	'Tcy',
	'tcy',
	'TScy',
	'tscy',
	'Ucy',
	'ucy',
	'Vcy',
	'vcy',
	'YAcy',
	'yacy',
	'Ycy',
	'ycy',
	'YUcy',
	'yucy',
	'Zcy',
	'zcy',
	'ZHcy',
	'zhcy',
	'DJcy',
	'djcy',
	'DScy',
	'dscy',
	'DZcy',
	'dzcy',
	'GJcy',
	'gjcy',
	'Iukcy',
	'iukcy',
	'Jsercy',
	'jsercy',
	'Jukcy',
	'jukcy',
	'KJcy',
	'kjcy',
	'LJcy',
	'ljcy',
	'NJcy',
	'njcy',
	'TSHcy',
	'tshcy',
	'Ubrcy',
	'ubrcy',
	'YIcy',
	'yicy',
	'acute',
	'breve',
	'caron',
	'cedil',
	'circ',
	'dblac',
	'die',
	'dot',
	'grave',
	'macr',
	'ogon',
	'ring',
	'tilde',
	'uml',
	'Aacute',
	'aacute',
	'Acirc',
	'acirc',
	'AElig',
	'aelig',
	'Agrave',
	'agrave',
	'Aring',
	'aring',
	'Atilde',
	'atilde',
	'Auml',
	'auml',
	'Ccedil',
	'ccedil',
	'Eacute',
	'eacute',
	'Ecirc',
	'ecirc',
	'Egrave',
	'egrave',
	'ETH',
	'eth',
	'Euml',
	'euml',
	'Iacute',
	'iacute',
	'Icirc',
	'icirc',
	'Igrave',
	'igrave',
	'Iuml',
	'iuml',
	'Ntilde',
	'ntilde',
	'Oacute',
	'oacute',
	'Ocirc',
	'ocirc',
	'Ograve',
	'ograve',
	'Oslash',
	'oslash',
	'Otilde',
	'otilde',
	'Ouml',
	'ouml',
	'szlig',
	'THORN',
	'thorn',
	'Uacute',
	'uacute',
	'Ucirc',
	'ucirc',
	'Ugrave',
	'ugrave',
	'Uuml',
	'uuml',
	'Yacute',
	'yacute',
	'yuml',
	'Abreve',
	'abreve',
	'Amacr',
	'amacr',
	'Aogon',
	'aogon',
	'Cacute',
	'cacute',
	'Ccaron',
	'ccaron',
	'Ccirc',
	'ccirc',
	'Cdot',
	'cdot',
	'Dcaron',
	'dcaron',
	'Dstrok',
	'dstrok',
	'Ecaron',
	'ecaron',
	'Edot',
	'edot',
	'Emacr',
	'emacr',
	'ENG',
	'eng',
	'Eogon',
	'eogon',
	'gacute',
	'Gbreve',
	'gbreve',
	'Gcedil',
	'Gcirc',
	'gcirc',
	'Gdot',
	'gdot',
	'Hcirc',
	'hcirc',
	'Hstrok',
	'hstrok',
	'Idot',
	'IJlig',
	'ijlig',
	'Imacr',
	'imacr',
	'inodot',
	'Iogon',
	'iogon',
	'Itilde',
	'itilde',
	'Jcirc',
	'jcirc',
	'Kcedil',
	'kcedil',
	'kgreen',
	'Lacute',
	'lacute',
	'Lcaron',
	'lcaron',
	'Lcedil',
	'lcedil',
	'Lmidot',
	'lmidot',
	'Lstrok',
	'lstrok',
	'Nacute',
	'nacute',
	'napos',
	'Ncaron',
	'ncaron',
	'Ncedil',
	'ncedil',
	'Odblac',
	'odblac',
	'OElig',
	'oelig',
	'Omacr',
	'omacr',
	'Racute',
	'racute',
	'Rcaron',
	'rcaron',
	'Rcedil',
	'rcedil',
	'Sacute',
	'sacute',
	'Scaron',
	'scaron',
	'Scedil',
	'scedil',
	'Scirc',
	'scirc',
	'Tcaron',
	'tcaron',
	'Tcedil',
	'tcedil',
	'Tstrok',
	'tstrok',
	'Ubreve',
	'ubreve',
	'Udblac',
	'udblac',
	'Umacr',
	'umacr',
	'Uogon',
	'uogon',
	'Uring',
	'uring',
	'Utilde',
	'utilde',
	'Wcirc',
	'wcirc',
	'Ycirc',
	'ycirc',
	'Yuml',
	'Zacute',
	'zacute',
	'Zcaron',
	'zcaron',
	'Zdot',
	'zdot',
	'apos',
	'ast',
	'brvbar',
	'bsol',
	'cent',
	'colon',
	'comma',
	'commat',
	'copy',
	'curren',
	'darr',
	'deg',
	'divide',
	'dollar',
	'equals',
	'excl',
	'frac12',
	'frac14',
	'frac18',
	'frac34',
	'frac38',
	'frac58',
	'frac78',
	'gt',
	'half',
	'horbar',
	'hyphen',
	'iexcl',
	'iquest',
	'laquo',
	'larr',
	'lcub',
	'ldquo',
	'lowbar',
	'lpar',
	'lsqb',
	'lsquo',
	'micro',
	'middot',
	'nbsp',
	'not',
	'num',
	'ohm',
	'ordf',
	'ordm',
	'para',
	'percnt',
	'period',
	'plus',
	'plusmn',
	'pound',
	'quest',
	'quot',
	'raquo',
	'rarr',
	'rcub',
	'rdquo',
	'reg',
	'rpar',
	'rsqb',
	'rsquo',
	'sect',
	'semi',
	'shy',
	'sol',
	'sung',
	'sup1',
	'sup2',
	'sup3',
	'times',
	'trade',
	'uarr',
	'verbar',
	'yen',
	'blank',
	'blk12',
	'blk14',
	'blk34',
	'block',
	'bull',
	'caret',
	'check',
	'cir',
	'clubs',
	'copysr',
	'cross',
	'Dagger',
	'dagger',
	'dash',
	'diams',
	'dlcrop',
	'drcrop',
	'dtri',
	'dtrif',
	'emsp',
	'emsp13',
	'emsp14',
	'ensp',
	'female',
	'ffilig',
	'fflig',
	'ffllig',
	'filig',
	'flat',
	'fllig',
	'frac13',
	'frac15',
	'frac16',
	'frac23',
	'frac25',
	'frac35',
	'frac45',
	'frac56',
	'hairsp',
	'hearts',
	'hellip',
	'hybull',
	'incare',
	'ldquor',
	'lhblk',
	'loz',
	'lozf',
	'lsquor',
	'ltri',
	'ltrif',
	'male',
	'malt',
	'marker',
	'mdash',
	'mldr',
	'natur',
	'ndash',
	'nldr',
	'numsp',
	'phone',
	'puncsp',
	'rdquor',
	'rect',
	'rsquor',
	'rtri',
	'rtrif',
	'rx',
	'sext',
	'sharp',
	'spades',
	'squ',
	'squf',
	'star',
	'starf',
	'target',
	'telrec',
	'thinsp',
	'uhblk',
	'ulcrop',
	'urcrop',
	'utri',
	'utrif',
	'vellip',
	'af',
	'aopf',
	'asympeq',
	'bopf',
	'copf',
	'Cross',
	'DD',
	'dd',
	'dopf',
	'DownArrowBar',
	'DownBreve',
	'DownLeftRightVector',
	'DownLeftTeeVector',
	'DownLeftVectorBar',
	'DownRightTeeVector',
	'DownRightVectorBar',
	'ee',
	'EmptySmallSquare',
	'EmptyVerySmallSquare',
	'eopf',
	'Equal',
	'FilledSmallSquare',
	'FilledVerySmallSquare',
	'fopf',
	'gopf',
	'GreaterGreater',
	'Hat',
	'hopf',
	'HorizontalLine',
	'ic',
	'ii',
	'iopf',
	'it',
	'jopf',
	'kopf',
	'larrb',
	'LeftDownTeeVector',
	'LeftDownVectorBar',
	'LeftRightVector',
	'LeftTeeVector',
	'LeftTriangleBar',
	'LeftUpDownVector',
	'LeftUpTeeVector',
	'LeftUpVectorBar',
	'LeftVectorBar',
	'LessLess',
	'lopf',
	'mapstodown',
	'mapstoleft',
	'mapstoup',
	'MediumSpace',
	'mopf',
	'nbump',
	'nbumpe',
	'nesim',
	'NewLine',
	'NoBreak',
	'nopf',
	'NotCupCap',
	'NotHumpEqual',
	'NotLeftTriangleBar',
	'NotNestedGreaterGreater',
	'NotNestedLessLess',
	'NotRightTriangleBar',
	'NotSquareSubset',
	'NotSquareSuperset',
	'NotSucceedsTilde',
	'oopf',
	'OverBar',
	'OverBrace',
	'OverBracket',
	'OverParenthesis',
	'planckh',
	'popf',
	'Product',
	'qopf',
	'rarrb',
	'RightDownTeeVector',
	'RightDownVectorBar',
	'RightTeeVector',
	'RightTriangleBar',
	'RightUpDownVector',
	'RightUpTeeVector',
	'RightUpVectorBar',
	'RightVectorBar',
	'ropf',
	'RoundImplies',
	'RuleDelayed',
	'sopf',
	'Tab',
	'ThickSpace',
	'topf',
	'UnderBar',
	'UnderBrace',
	'UnderBracket',
	'UnderParenthesis',
	'uopf',
	'UpArrowBar',
	'Upsilon',
	'VerticalLine',
	'VerticalSeparator',
	'vopf',
	'wopf',
	'xopf',
	'yopf',
	'ZeroWidthSpace',
	'zopf',
	'angle',
	'ApplyFunction',
	'approx',
	'approxeq',
	'Assign',
	'backcong',
	'backepsilon',
	'backprime',
	'backsim',
	'backsimeq',
	'Backslash',
	'barwedge',
	'Because',
	'because',
	'Bernoullis',
	'between',
	'bigcap',
	'bigcirc',
	'bigcup',
	'bigodot',
	'bigoplus',
	'bigotimes',
	'bigsqcup',
	'bigstar',
	'bigtriangledown',
	'bigtriangleup',
	'biguplus',
	'bigvee',
	'bigwedge',
	'bkarow',
	'blacklozenge',
	'blacksquare',
	'blacktriangle',
	'blacktriangledown',
	'blacktriangleleft',
	'blacktriangleright',
	'bot',
	'boxminus',
	'boxplus',
	'boxtimes',
	'Breve',
	'bullet',
	'Bumpeq',
	'bumpeq',
	'CapitalDifferentialD',
	'Cayleys',
	'Cedilla',
	'CenterDot',
	'centerdot',
	'checkmark',
	'circeq',
	'circlearrowleft',
	'circlearrowright',
	'circledast',
	'circledcirc',
	'circleddash',
	'CircleDot',
	'circledR',
	'circledS',
	'CircleMinus',
	'CirclePlus',
	'CircleTimes',
	'ClockwiseContourIntegral',
	'CloseCurlyDoubleQuote',
	'CloseCurlyQuote',
	'clubsuit',
	'coloneq',
	'complement',
	'complexes',
	'Congruent',
	'ContourIntegral',
	'Coproduct',
	'CounterClockwiseContourIntegral',
	'CupCap',
	'curlyeqprec',
	'curlyeqsucc',
	'curlyvee',
	'curlywedge',
	'curvearrowleft',
	'curvearrowright',
	'dbkarow',
	'ddagger',
	'ddotseq',
	'Del',
	'DiacriticalAcute',
	'DiacriticalDot',
	'DiacriticalDoubleAcute',
	'DiacriticalGrave',
	'DiacriticalTilde',
	'Diamond',
	'diamond',
	'diamondsuit',
	'DifferentialD',
	'digamma',
	'div',
	'divideontimes',
	'doteq',
	'doteqdot',
	'DotEqual',
	'dotminus',
	'dotplus',
	'dotsquare',
	'doublebarwedge',
	'DoubleContourIntegral',
	'DoubleDot',
	'DoubleDownArrow',
	'DoubleLeftArrow',
	'DoubleLeftRightArrow',
	'DoubleLeftTee',
	'DoubleLongLeftArrow',
	'DoubleLongLeftRightArrow',
	'DoubleLongRightArrow',
	'DoubleRightArrow',
	'DoubleRightTee',
	'DoubleUpArrow',
	'DoubleUpDownArrow',
	'DoubleVerticalBar',
	'DownArrow',
	'Downarrow',
	'downarrow',
	'DownArrowUpArrow',
	'downdownarrows',
	'downharpoonleft',
	'downharpoonright',
	'DownLeftVector',
	'DownRightVector',
	'DownTee',
	'DownTeeArrow',
	'drbkarow',
	'Element',
	'emptyset',
	'eqcirc',
	'eqcolon',
	'eqsim',
	'eqslantgtr',
	'eqslantless',
	'EqualTilde',
	'Equilibrium',
	'Exists',
	'expectation',
	'ExponentialE',
	'exponentiale',
	'fallingdotseq',
	'ForAll',
	'Fouriertrf',
	'geq',
	'geqq',
	'geqslant',
	'gg',
	'ggg',
	'gnapprox',
	'gneq',
	'gneqq',
	'GreaterEqual',
	'GreaterEqualLess',
	'GreaterFullEqual',
	'GreaterLess',
	'GreaterSlantEqual',
	'GreaterTilde',
	'gtrapprox',
	'gtrdot',
	'gtreqless',
	'gtreqqless',
	'gtrless',
	'gtrsim',
	'gvertneqq',
	'Hacek',
	'hbar',
	'heartsuit',
	'HilbertSpace',
	'hksearow',
	'hkswarow',
	'hookleftarrow',
	'hookrightarrow',
	'hslash',
	'HumpDownHump',
	'HumpEqual',
	'iiiint',
	'iiint',
	'Im',
	'ImaginaryI',
	'imagline',
	'imagpart',
	'Implies',
	'in',
	'integers',
	'Integral',
	'intercal',
	'Intersection',
	'intprod',
	'InvisibleComma',
	'InvisibleTimes',
	'langle',
	'Laplacetrf',
	'lbrace',
	'lbrack',
	'LeftAngleBracket',
	'LeftArrow',
	'Leftarrow',
	'leftarrow',
	'LeftArrowBar',
	'LeftArrowRightArrow',
	'leftarrowtail',
	'LeftCeiling',
	'LeftDoubleBracket',
	'LeftDownVector',
	'LeftFloor',
	'leftharpoondown',
	'leftharpoonup',
	'leftleftarrows',
	'LeftRightArrow',
	'Leftrightarrow',
	'leftrightarrow',
	'leftrightarrows',
	'leftrightharpoons',
	'leftrightsquigarrow',
	'LeftTee',
	'LeftTeeArrow',
	'leftthreetimes',
	'LeftTriangle',
	'LeftTriangleEqual',
	'LeftUpVector',
	'LeftVector',
	'leq',
	'leqq',
	'leqslant',
	'lessapprox',
	'lessdot',
	'lesseqgtr',
	'lesseqqgtr',
	'LessEqualGreater',
	'LessFullEqual',
	'LessGreater',
	'lessgtr',
	'lesssim',
	'LessSlantEqual',
	'LessTilde',
	'll',
	'llcorner',
	'Lleftarrow',
	'lmoustache',
	'lnapprox',
	'lneq',
	'lneqq',
	'LongLeftArrow',
	'Longleftarrow',
	'longleftarrow',
	'LongLeftRightArrow',
	'Longleftrightarrow',
	'longleftrightarrow',
	'longmapsto',
	'LongRightArrow',
	'Longrightarrow',
	'longrightarrow',
	'looparrowleft',
	'looparrowright',
	'LowerLeftArrow',
	'LowerRightArrow',
	'lozenge',
	'lrcorner',
	'Lsh',
	'lvertneqq',
	'maltese',
	'mapsto',
	'measuredangle',
	'Mellintrf',
	'MinusPlus',
	'mp',
	'multimap',
	'napprox',
	'natural',
	'naturals',
	'nearrow',
	'NegativeMediumSpace',
	'NegativeThickSpace',
	'NegativeThinSpace',
	'NegativeVeryThinSpace',
	'NestedGreaterGreater',
	'NestedLessLess',
	'nexists',
	'ngeq',
	'ngeqq',
	'ngeqslant',
	'ngtr',
	'nLeftarrow',
	'nleftarrow',
	'nLeftrightarrow',
	'nleftrightarrow',
	'nleq',
	'nleqq',
	'nleqslant',
	'nless',
	'NonBreakingSpace',
	'NotCongruent',
	'NotDoubleVerticalBar',
	'NotElement',
	'NotEqual',
	'NotEqualTilde',
	'NotExists',
	'NotGreater',
	'NotGreaterEqual',
	'NotGreaterFullEqual',
	'NotGreaterGreater',
	'NotGreaterLess',
	'NotGreaterSlantEqual',
	'NotGreaterTilde',
	'NotHumpDownHump',
	'NotLeftTriangle',
	'NotLeftTriangleEqual',
	'NotLess',
	'NotLessEqual',
	'NotLessGreater',
	'NotLessLess',
	'NotLessSlantEqual',
	'NotLessTilde',
	'NotPrecedes',
	'NotPrecedesEqual',
	'NotPrecedesSlantEqual',
	'NotReverseElement',
	'NotRightTriangle',
	'NotRightTriangleEqual',
	'NotSquareSubsetEqual',
	'NotSquareSupersetEqual',
	'NotSubset',
	'NotSubsetEqual',
	'NotSucceeds',
	'NotSucceedsEqual',
	'NotSucceedsSlantEqual',
	'NotSuperset',
	'NotSupersetEqual',
	'NotTilde',
	'NotTildeEqual',
	'NotTildeFullEqual',
	'NotTildeTilde',
	'NotVerticalBar',
	'nparallel',
	'nprec',
	'npreceq',
	'nRightarrow',
	'nrightarrow',
	'nshortmid',
	'nshortparallel',
	'nsimeq',
	'nsubset',
	'nsubseteq',
	'nsubseteqq',
	'nsucc',
	'nsucceq',
	'nsupset',
	'nsupseteq',
	'nsupseteqq',
	'ntriangleleft',
	'ntrianglelefteq',
	'ntriangleright',
	'ntrianglerighteq',
	'nwarrow',
	'oint',
	'OpenCurlyDoubleQuote',
	'OpenCurlyQuote',
	'orderof',
	'parallel',
	'PartialD',
	'pitchfork',
	'PlusMinus',
	'pm',
	'Poincareplane',
	'prec',
	'precapprox',
	'preccurlyeq',
	'Precedes',
	'PrecedesEqual',
	'PrecedesSlantEqual',
	'PrecedesTilde',
	'preceq',
	'precnapprox',
	'precneqq',
	'precnsim',
	'precsim',
	'primes',
	'Proportion',
	'Proportional',
	'propto',
	'quaternions',
	'questeq',
	'rangle',
	'rationals',
	'rbrace',
	'rbrack',
	'Re',
	'realine',
	'realpart',
	'reals',
	'ReverseElement',
	'ReverseEquilibrium',
	'ReverseUpEquilibrium',
	'RightAngleBracket',
	'RightArrow',
	'Rightarrow',
	'rightarrow',
	'RightArrowBar',
	'RightArrowLeftArrow',
	'rightarrowtail',
	'RightCeiling',
	'RightDoubleBracket',
	'RightDownVector',
	'RightFloor',
	'rightharpoondown',
	'rightharpoonup',
	'rightleftarrows',
	'rightleftharpoons',
	'rightrightarrows',
	'rightsquigarrow',
	'RightTee',
	'RightTeeArrow',
	'rightthreetimes',
	'RightTriangle',
	'RightTriangleEqual',
	'RightUpVector',
	'RightVector',
	'risingdotseq',
	'rmoustache',
	'Rrightarrow',
	'Rsh',
	'searrow',
	'setminus',
	'ShortDownArrow',
	'ShortLeftArrow',
	'shortmid',
	'shortparallel',
	'ShortRightArrow',
	'ShortUpArrow',
	'simeq',
	'SmallCircle',
	'smallsetminus',
	'spadesuit',
	'Sqrt',
	'sqsubset',
	'sqsubseteq',
	'sqsupset',
	'sqsupseteq',
	'Square',
	'SquareIntersection',
	'SquareSubset',
	'SquareSubsetEqual',
	'SquareSuperset',
	'SquareSupersetEqual',
	'SquareUnion',
	'Star',
	'straightepsilon',
	'straightphi',
	'Subset',
	'subset',
	'subseteq',
	'subseteqq',
	'SubsetEqual',
	'subsetneq',
	'subsetneqq',
	'succ',
	'succapprox',
	'succcurlyeq',
	'Succeeds',
	'SucceedsEqual',
	'SucceedsSlantEqual',
	'SucceedsTilde',
	'succeq',
	'succnapprox',
	'succneqq',
	'succnsim',
	'succsim',
	'SuchThat',
	'Sum',
	'Superset',
	'SupersetEqual',
	'Supset',
	'supset',
	'supseteq',
	'supseteqq',
	'supsetneq',
	'supsetneqq',
	'swarrow',
	'Therefore',
	'therefore',
	'thickapprox',
	'thicksim',
	'ThinSpace',
	'Tilde',
	'TildeEqual',
	'TildeFullEqual',
	'TildeTilde',
	'toea',
	'tosa',
	'triangle',
	'triangledown',
	'triangleleft',
	'trianglelefteq',
	'triangleq',
	'triangleright',
	'trianglerighteq',
	'TripleDot',
	'twoheadleftarrow',
	'twoheadrightarrow',
	'ulcorner',
	'Union',
	'UnionPlus',
	'UpArrow',
	'Uparrow',
	'uparrow',
	'UpArrowDownArrow',
	'UpDownArrow',
	'Updownarrow',
	'updownarrow',
	'UpEquilibrium',
	'upharpoonleft',
	'upharpoonright',
	'UpperLeftArrow',
	'UpperRightArrow',
	'upsilon',
	'UpTee',
	'UpTeeArrow',
	'upuparrows',
	'urcorner',
	'varepsilon',
	'varkappa',
	'varnothing',
	'varphi',
	'varpi',
	'varpropto',
	'varrho',
	'varsigma',
	'varsubsetneq',
	'varsubsetneqq',
	'varsupsetneq',
	'varsupsetneqq',
	'vartheta',
	'vartriangleleft',
	'vartriangleright',
	'Vee',
	'vee',
	'Vert',
	'vert',
	'VerticalBar',
	'VerticalTilde',
	'VeryThinSpace',
	'Wedge',
	'wedge',
	'wp',
	'wr',
	'zeetrf'
			);

  var $acceptable_elements = array(
			       'a',
			       'abbr',
			       'acronym',
			       'address',
			       'area',
			       'audio',
			       'b',
			       'big',
			       'blockquote',
			       'br',
			       'button',
			       'caption',
			       'center',
			       'cite',
			       'code',
			       'col',
			       'colgroup',
			       'dd',
			       'del',
			       'dfn',
			       'dir',
			       'div',
			       'dl',
			       'dt',
			       'em',
			       'fieldset',
			       'font',
			       'form',
			       'h1',
			       'h2',
			       'h3',
			       'h4',
			       'h5',
			       'h6',
			       'hr',
			       'i',
			       'img',
			       'input',
			       'ins',
			       'kbd',
			       'label',
			       'legend',
			       'li',
			       'map',
			       'menu',
			       'ol',
			       'optgroup',
			       'option',
			       'p',
			       'pre',
			       'q',
			       's',
			       'samp',
			       'select',
			       'small',
			       'span',
			       'strike',
			       'strong',
			       'sub',
			       'sup',
			       'table',
			       'tbody',
			       'td',
			       'textarea',
			       'tfoot',
			       'th',
			       'thead',
			       'tr',
			       'tt',
			       'u',
			       'ul',
			       'var',
			       'video',
			       );

  var $mathml_elements = array(
			   'annotation',
			   'annotation-xml',
			   'maction',
			   'math',
			   'merror',
			   'mfrac',
			   'mfenced',
			   'mi',
			   'mmultiscripts',
			   'mn',
			   'mo',
			   'mover',
			   'mpadded',
			   'mphantom',
			   'mprescripts',
			   'mroot',
			   'mrow',
			   'mspace',
			   'msqrt',
			   'mstyle',
			   'msub',
			   'msubsup',
			   'msup',
			   'mtable',
			   'mtd',
			   'mtext',
			   'mtr',
			   'munder',
			   'munderover',
			   'none',
			   'semantics'
			   );

      
  var $svg_elements = array(
			'a',
			'animate',
			'animateColor',
			'animateMotion',
			'animateTransform',
			'circle',
			'clipPath',
			'defs',
			'desc',
			'ellipse',
			'font-face',
			'font-face-name',
			'font-face-src',
			'foreignObject',
			'g',
			'glyph',
			'hkern',
			'linearGradient',
			'line',
			'marker',
			'metadata',
			'missing-glyph',
			'mpath',
			'path',
			'polygon',
			'polyline',
			'radialGradient',
			'rect',
			'set',
			'stop',
			'svg',
			'switch',
			'text',
			'title',
			'tspan',
			'use'
			);

      
  var $acceptable_attributes = array(
				 'abbr',
				 'accept',
				 'accept-charset',
				 'accesskey',
				 'action',
				 'align',
				 'alt',
				 'axis',
				 'border',
				 'cellpadding',
				 'cellspacing',
				 'char',
				 'charoff',
				 'charset',
				 'checked',
				 'cite',
				 'class',
				 'clear',
				 'cols',
				 'colspan',
				 'color',
				 'compact',
				 'controls',
				 'coords',
				 'datetime',
				 'dir',
				 'disabled',
				 'enctype',
				 'for',
				 'frame',
				 'headers',
				 'height',
				 'href',
				 'hreflang',
				 'hspace',
				 'id',
				 'ismap',
				 'label',
				 'lang',
				 'longdesc',
				 'loop',
				 'maxlength',
				 'media',
				 'method',
				 'multiple',
				 'name',
				 'nohref',
				 'noshade',
				 'nowrap',
				 'poster',
				 'prompt',
				 'readonly',
				 'rel',
				 'rev',
				 'rows',
				 'rowspan',
				 'rules',
				 'scope',
				 'selected',
				 'shape',
				 'size',
				 'span',
				 'src',
				 'start',
				 'style',
				 'summary',
				 'tabindex',
				 'target',
				 'title',
				 'type',
				 'usemap',
				 'valign',
				 'value',
				 'vspace',
				 'width',
				 'xml:lang'
				 );

  var $mathml_attributes = array(
			     'actiontype',
			     'align',
			     'close',
			     'columnalign',
			     'columnalign',
			     'columnalign',
			     'columnlines',
			     'columnspacing',
			     'columnspan',
			     'depth',
			     'display',
			     'displaystyle',
			     'encoding',
			     'equalcolumns',
			     'equalrows',
			     'fence',
			     'fontstyle',
			     'fontweight',
			     'frame',
			     'height',
			     'linethickness',
			     'lspace',
			     'mathbackground',
			     'mathcolor',
			     'mathvariant',
			     'mathvariant',
			     'maxsize',
			     'minsize',
			     'open',
			     'other',
			     'rowalign',
			     'rowalign',
			     'rowalign',
			     'rowlines',
			     'rowspacing',
			     'rowspan',
			     'rspace',
			     'scriptlevel',
			     'selection',
			     'separator',
			     'separators',
			     'stretchy',
			     'width',
			     'width',
			     'xlink:href',
			     'xlink:show',
			     'xlink:type',
			     'xmlns',
			     'xmlns:xlink'
			     );


  var $svg_attributes = array(
			  'accent-height',
			  'accumulate',
			  'additive',
			  'alphabetic',
			  'arabic-form',
			  'ascent',
			  'attributeName',
			  'attributeType',
			  'baseProfile',
			  'bbox',
			  'begin',
			  'by',
			  'calcMode',
			  'cap-height',
			  'class',
			  'clip-path',
			  'clip-rule',
			  'color',
			  'color-rendering',
			  'content',
			  'cx',
			  'cy',
			  'd',
			  'dx',
			  'dy',
			  'descent',
			  'display',
			  'dur',
			  'end',
			  'fill',
			  'fill-opacity',
			  'fill-rule',
			  'font-family',
			  'font-size',
			  'font-stretch',
			  'font-style',
			  'font-variant',
			  'font-weight',
			  'from',
			  'fx',
			  'fy',
			  'g1',
			  'g2',
			  'glyph-name',
			  'gradientUnits',
			  'hanging',
			  'height',
			  'horiz-adv-x',
			  'horiz-origin-x',
			  'id',
			  'ideographic',
			  'k',
			  'keyPoints',
			  'keySplines',
			  'keyTimes',
			  'lang',
			  'marker-end',
			  'marker-mid',
			  'marker-start',
			  'markerHeight',
			  'markerUnits',
			  'markerWidth',
			  'mathematical',
			  'max',
			  'min',
			  'name',
			  'offset',
			  'opacity',
			  'orient',
			  'origin',
			  'overline-position',
			  'overline-thickness',
			  'panose-1',
			  'path',
			  'pathLength',
			  'points',
			  'preserveAspectRatio',
			  'r',
			  'refX',
			  'refY',
			  'repeatCount',
			  'repeatDur',
			  'requiredExtensions',
			  'requiredFeatures',
			  'restart',
			  'rotate',
			  'rx',
			  'ry',
			  'slope',
			  'stemh',
			  'stemv',
			  'stop-color',
			  'stop-opacity',
			  'strikethrough-position',
			  'strikethrough-thickness',
			  'stroke',
			  'stroke-dasharray',
			  'stroke-dashoffset',
			  'stroke-linecap',
			  'stroke-linejoin',
			  'stroke-miterlimit',
			  'stroke-opacity',
			  'stroke-width',
			  'systemLanguage',
			  'target',
			  'text-anchor',
			  'to',
			  'transform',
			  'type',
			  'u1',
			  'u2',
			  'underline-position',
			  'underline-thickness',
			  'unicode',
			  'unicode-range',
			  'units-per-em',
			  'values',
			  'version',
			  'viewBox',
			  'visibility',
			  'width',
			  'widths',
			  'x',
			  'x-height',
			  'x1',
			  'x2',
			  'xlink:actuate',
			  'xlink:arcrole',
			  'xlink:href',
			  'xlink:role',
			  'xlink:show',
			  'xlink:title',
			  'xlink:type',
			  'xml:base',
			  'xml:lang',
			  'xml:space',
			  'xmlns',
			  'xmlns:xlink',
			  'y',
			  'y1',
			  'y2',
			  'zoomAndPan'
			  );

       
  var $attr_val_is_uri = array(
			   'href',
			   'src',
			   'cite',
			   'action',
			   'longdesc',
			   'xlink:href',
			   'xml:base'
			   );

  
  var $svg_attr_val_allows_ref = array(
				   'clip-path',
				   'color-profile',
				   'cursor',
				   'fill',
				   'filter',
				   'marker',
				   'marker-start',
				   'marker-mid',
				   'marker-end',
				   'mask',
				   'stroke'
				   );


  var $svg_allow_local_href = array(
				'altGlyph',
				'animate',
				'animateColor',
				'animateMotion',
				'animateTransform',
				'cursor',
				'feImage',
				'filter',
				'linearGradient',
				'pattern',
				'radialGradient',
				'textpath',
				'tref',
				'set',
				'use'
				);

    
  var $acceptable_css_properties = array(
				     'azimuth',
				     'background-color',
				     'border-bottom-color',
				     'border-collapse',
				     'border-color',
				     'border-left-color',
				     'border-right-color',
				     'border-top-color',
				     'clear',
				     'color',
				     'cursor',
				     'direction',
				     'display',
				     'elevation',
				     'float',
				     'font',
				     'font-family',
				     'font-size',
				     'font-style',
				     'font-variant',
				     'font-weight',
				     'height',
				     'letter-spacing',
				     'line-height',
				     'overflow',
				     'pause',
				     'pause-after',
				     'pause-before',
				     'pitch',
				     'pitch-range',
				     'richness',
				     'speak',
				     'speak-header',
				     'speak-numeral',
				     'speak-punctuation',
				     'speech-rate',
				     'stress',
				     'text-align',
				     'text-decoration',
				     'text-indent',
				     'unicode-bidi',
				     'vertical-align',
				     'voice-family',
				     'volume',
				     'white-space',
				     'width'
				     );


  var $acceptable_css_keywords = array(
				   'auto',
				   'aqua',
				   'black',
				   'block',
				   'blue',
				   'bold',
				   'both',
				   'bottom',
				   'brown',
				   'center',
				   'collapse',
				   'dashed',
				   'dotted',
				   'fuchsia',
				   'gray',
				   'green',
				   '!important',
				   'italic',
				   'left',
				   'lime',
				   'maroon',
				   'medium',
				   'none',
				   'navy',
				   'normal',
				   'nowrap',
				   'olive',
				   'pointer',
				   'purple',
				   'red',
				   'right',
				   'solid',
				   'silver',
				   'teal',
				   'top',
				   'transparent',
				   'underline',
				   'white',
				   'yellow'
				   );


  var $acceptable_svg_properties = array(
				     'fill',
				     'fill-opacity',
				     'fill-rule',
				     'stroke',
				     'stroke-width',
				     'stroke-linecap',
				     'stroke-linejoin',
				     'stroke-opacity'
				     );

  var $acceptable_protocols = array(
				'ed2k',
				'ftp',
				'http',
				'https',
				'irc',
				'mailto',
				'news',
				'gopher',
				'nntp',
				'telnet',
				'webcal',
				'xmpp',
				'callto',
				'feed',
				'urn',
				'aim',
				'rsync',
				'tag',
				'ssh',
				'sftp',
				'rtsp',
				'afs'
				);

      
  var $SHORTHAND_CSS_PROPERTIES = array(
				    'background',
				    'border',
				    'margin',
				    'padding'
				    );

  var $VOID_ELEMENTS = array(
			 'img',
			 'br',
			 'hr',
			 'link',
			 'meta',
			 'area',
			 'base',
			 'basefont',
			 'col',
			 'frame',
			 'input',
			 'isindex',
			 'param'
			 );

  var $blockquoteChildren = array(
				  'h1',
				  'h2',
				  'h3',
				  'h4',
				  'h5',
				  'h6',
				  'ul',
				  'ol',
				  'dl',
				  'p',
				  'div',
				  'pre',
				  'blockquote',
				  'address',
				  'hr',
				  'table',
				  'form',
				  'fieldset',
				  'ins',
				  'del',
				  'script',
				  'noscript',
				  'math',
				  'svg'
				  );

  var $ALLOWED_ELEMENTS;
  var $ALLOWED_ATTRIBUTES;
  var $ALLOWED_CSS_PROPERTIES;
  var $ALLOWED_CSS_KEYWORDS;
  var $ALLOWED_SVG_PROPERTIES;
  var $ALLOWED_PROTOCOLS;
  var $ATTR_VAL_IS_URI;
  var $SVG_ATTR_VAL_ALLOWS_REF;
  var $SVG_ALLOW_LOCAL_HREF;

  var $HTMLhead = '<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" />
<title>Is this valid?</title>
</head>
<body><div>
';


  var $HTMLfoot = '
</div></body>
</html>';

  var $headlines;

  function HTMLValidator()
  {

if (!is_array($this->ALLOWED_ELEMENTS))
  $this->ALLOWED_ELEMENTS = array_merge($this->acceptable_elements,$this->mathml_elements,$this->svg_elements);
if (!is_array($this->ALLOWED_ATTRIBUTES))
  $this->ALLOWED_ATTRIBUTES = array_merge($this->acceptable_attributes,$this->mathml_attributes,$this->svg_attributes);
if (!is_array($this->ALLOWED_CSS_PROPERTIES))
  $this->ALLOWED_CSS_PROPERTIES = $this->acceptable_css_properties;
if (!is_array($this->ALLOWED_CSS_KEYWORDS))
  $this->ALLOWED_CSS_KEYWORDS = $this->acceptable_css_keywords;
if (!is_array($this->ALLOWED_SVG_PROPERTIES))
  $this->ALLOWED_SVG_PROPERTIES = $this->acceptable_svg_properties;
if (!is_array($this->ALLOWED_PROTOCOLS))
  $this->ALLOWED_PROTOCOLS = $this->acceptable_protocols;
if (!is_array($this->ATTR_VAL_IS_URI))
  $this->ATTR_VAL_IS_URI = $this->attr_val_is_uri;
if (!is_array($this->SVG_ATTR_VAL_ALLOWS_REF))
  $this->SVG_ATTR_VAL_ALLOWS_REF = $this->svg_attr_val_allows_ref;
if (!is_array($this->SVG_ALLOW_LOCAL_HREF))
  $this->SVG_ALLOW_LOCAL_HREF = $this->svg_allow_local_href;

  $this->headlines = count(explode("\n",$this->HTMLhead)) - 1;

  }



  function parse($string, $report = false)
{
  //    $dom = new DOMDocument;
    $html5 = new HTML5();
    $dom = $html5->loadHTML($this->HTMLhead . $string . $this->HTMLfoot);
    //  libxml_use_internal_errors(true);

  if (!$dom)
    {
      //$errors = libxml_get_errors();
      return $this->display_errors($errors,$string,'This comment is invalid XML; displaying source.',$report);
    }
  else
    {
    $bodyList = $dom->getElementsByTagName('body');
    if ($bodyList->length != 1 || $bodyList->item(0)->childNodes->length !=1)
      return $this->display_errors(array(),$string,'This comment attempts to circumvent the validator; displaying source.');

    $comment = $bodyList->item(0)->firstChild;

    if ($this->SANITISE)
      $this->sanitise($comment, $this->CORRECT);

    $stext = $dom->saveXML($comment);

    if (!$this->VALIDATE || $dom->validate())
      {
	return $stext;
      }
    else
      {
	//$errors = libxml_get_errors();
	return $this->display_errors($errors,$stext,'This comment is invalid HTML5; displaying source.',$report);
      }
  }
}


  function display_errors($errors, $text,$message,$report = false)
{
  global $headlines;
  $errstring =  '<span class="invalid_message">'
    . htmlspecialchars($message,ENT_QUOTES,'UTF-8')
    . '</span>
<code class="invalid_comment">'
  . safeToDisplay($text)
	. '</code>';

  if ($report)
    {

      $errstring .= '<code class="comment_errors">';

  foreach ($errors as $error)
    {
      switch ($error->level) {
      case LIBXML_ERR_WARNING:
	break;
      case LIBXML_ERR_FATAL:
	$errstring .= "Fatal ";
      case LIBXML_ERR_ERROR:
	$errstring .= "Error $error->code: ";
	$message = preg_replace_callback('/line (\d+)/', create_function('$l', 'return "line " . ($l[1] - '. $this->headlines .');'), $error->message);
	$errstring .= htmlspecialchars(trim($message),ENT_QUOTES,'UTF-8') .
	  "\n  Line: " . ($error->line - $this->headlines) .
	  ", column: $error->column" .
	  "\n--------------------------------------------\n";
	break;
      }
    }

  $errstring .= '</code>';
    }
  return $errstring;
}

  function sanitise (&$elt,$correct = false)
{

  if ($elt instanceof DOMDocument)
    {
      $this->sanitise ($elt->documentElement,$correct);
    }
  else
    {
      // text nodes are fine, and have no attributes, so skip to children
      if ($elt->nodeType == XML_ENTITY_REF_NODE)
	{
	  if (!in_array($elt->nodeName, $this->entities))
	    {
	      $parent = $elt->parentNode;
	      $escent = $elt->ownerDocument->createTextNode("&" . $elt->nodeName . ";");
	      $parent->replaceChild($escent, $elt);
	    }
	}
      elseif ($elt->nodeType !== XML_TEXT_NODE)
	{

	  if (in_array($elt->nodeName,$this->ALLOWED_ELEMENTS))
	    {
	      $this->sanitiseAttributes($elt);
	      if ($elt->nodeName == 'blockquote')
		{
		  $this->fixBlockQuotes($elt);
		}
	    }
	  else
	    {
	      $this->deleteNode($elt);
	    }
	}


      if ($elt->hasChildNodes())
	{
	  $children = $elt->childNodes;
	  
	  foreach ($children as $child)
	    {
	      $childnodes[] = $child;
	    }
	  $numChildren = count($childnodes);
	  for ($i = 0; $i< $numChildren; $i++)
	    {
	      $this->sanitise($childnodes[$i],$correct);
	    }
	}
    }
}

function sanitiseAttributes(&$elt)
{
  if (!$elt->hasAttributes())
    return;

  $attrs = array();

  // store in array to avoid issues with deleting
  foreach ($elt->attributes as $attribute)
    {
      $attrs[] = $attribute;
    }
  $numattrs = count($attrs);

  foreach ($attrs as $attribute)
    {
      if (in_array($attribute->name, $this->ALLOWED_ATTRIBUTES))
	{
	  $attribute->value = htmlspecialchars(html_entity_decode($attribute->value, ENT_QUOTES, 'UTF-8'), ENT_QUOTES, 'UTF-8');
	  if (($attribute->name == 'xlink:href') && in_array($elt->nodeName, $this->SVG_ALLOW_LOCAL_HREF) && preg_match('/^\s*[^#\s]/m', $attribute->value))
		$elt->removeAttributeNode($attribute);
	  if (in_array($attribute->name,$this->ATTR_VAL_IS_URI))
	    {
	      $value_unescaped = html_entity_decode($attribute->value);
	      $value_unescaped = preg_replace('/`|[\000-\040\177\s]+|\302[\200-\240]/','',$value_unescaped);
	      $value_unescaped = strtolower($value_unescaped);
	      if (preg_match('/^([a-z0-9][-+.a-z0-9]*):/',$value_unescaped,$matches) && !in_array($matches[1], $this->ALLOWED_PROTOCOLS))
		$elt->removeAttributeNode($attribute);

	    }
	  if (in_array($attribute->name, $this->SVG_ATTR_VAL_ALLOWS_REF))
	    {
	      $attribute->value = preg_replace('/url\s*\(\s*[^#\s][^)]+?\)/mi', ' ',$attribute->value);
	    }
	  if ($attribute->name == 'style')
	    $attribute->value = $this->sanitiseCSS($attribute->value);
	}
      else
	{
	  $elt->removeAttributeNode($attribute);
	}
    }
}

function sanitiseCSS($style)
{

  $style = preg_replace('/url\s*\(\s*[^\s)]+?\s*\)\s*/',' ',$style);

  if (!preg_match('/^([-:,;#%.\sa-zA-Z0-9!]|\w-\w|\'[\s\w]+\'|\"[\s\w]+\"|\([\d,\s]+\))*$/', $style))
      return '';
  if (!preg_match('/^\s*([-\w]+\s*:[^:;]*(;\s*|$))*$/',$style))
      return '';

  $clean = array();
  preg_match_all('/([-\w]+)\s*:\s*([^:;]*)/',$style,$matches,PREG_SET_ORDER);
  foreach ($matches as $match)
    {
      if (count($match) != 3 || $match[2] == '')
	continue;
      $val = $match[2];
      $prop = strtolower($match[1]);
      $baseprops = split('-', $prop);
      $baseprop = $baseprops[0];
      if (in_array($prop,$this->ALLOWED_CSS_PROPERTIES))
	{
	  $clean[] = "$prop: $val;";
	}
      elseif (in_array($prop,$this->ALLOWED_SVG_PROPERTIES))
	{
	  $clean[] = "$prop: $val;";
	}
      elseif (in_array($baseprop,$this->SHORTHAND_CSS_PROPERTIES))
	{
	  $keywords = split(' ',$val);
	  $allow = true;
	  foreach ($keywords as $keyword)
	    {
	      if (!in_array($keyword, $this->ALLOWED_CSS_KEYWORDS)
		  && !preg_match('/^(#[0-9a-f]+|rgb\(\d+%?,\d*%?,?\d*%?\)?|\d{0,2}\.?\d{0,2}(cm|em|ex|in|mm|pc|pt|px|%|,|\))?)$/',$keyword))
		{
		  $allow = false;
		}
	    }
	  if ($allow)
	    $clean[] = "$prop: $val;";
	}
    }

  return implode(' ', $clean);

}

function deleteNode(&$node) {
  $this->deleteChildren($node);
  $parent = $node->parentNode;
  $oldnode = $parent->removeChild($node);
}

function deleteChildren(&$node) {
  while (isset($node->firstChild) && ($node->firstChild instanceof DOMNode)) {
    $this->deleteChildren($node->firstChild);
    $node->removeChild($node->firstChild);
  }
} 

function fixBlockQuotes(&$node) {
  // Fix <br/>s before and after enclosing tags
  foreach (array($node->firstChild, $node->lastChild, $node->previousSibling, $node->nextSibling) as $isbr) {
    if (($isbr instanceof DOMNode) && ($isbr->nodeName == 'br')) $this->deleteNode($isbr);
  }
      // now iterate over the children, wrapping illegal ones in <p>s
  $children = $node->childNodes;
  $num = $children->length;
  for ($i = 0; $i < $num; $i++) {
    $child = $children->item($i);
    if (!(($child instanceof DOMNode) && in_array($child->nodeName, $this->blockquoteChildren))) {

      $para = $node->ownerDocument->createElement('p');
      $node->insertBefore($para, $child);
      $para->appendChild($child);
      
    }
  }
}

}
?>
